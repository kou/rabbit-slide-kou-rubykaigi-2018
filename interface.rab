= Interface

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2018
: date
   2018-06-01
: start-time
   2018-06-01T09:40:00+09:00
: end-time
   2018-06-01T10:40:00+09:00
: theme
   .

= Ad: Silver sponsor

  # img
  # src = images/clear-code-rubykaigi-2018-silver-sponsor.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= Interface?

  A | B
    ^
   Here

= API

  Library | Program
          ^
         API

= Web API

  Server | HTTP | Client
         ^^^^^^^^
         Web API

= CLI

  Program | command | User
          ^^^^^^^^^^^
    Command Line Interface

= My activities\nas a Rubyist

  * Expand Ruby usable area
  * Maintain libraries

= The number of developing libraries

About 130

= Ruby anywhere

There are many interfaces

= This talk's content

  * Show my knowledge\n
    from my activities\n
    (('note:自分の活動で得られた知見を紹介'))
  * Perspective："Interface"\n
    (('note:切り口：「インターフェイス」'))

= RSS Parser

Makes Ruby\n
((*Web feed*))\n
ready

= RSS Parser - History

  * 2003-05: The first release
  * 2004-01: Ruby bundles this
    * Became a Ruby committer

= RSS Parser - Interface

  RSS Parser | Programmers
             ^
            API

= RSS Parser - API

  * Map RSS structure to
    * classes and
    * methods

= Map to classes

  <rss>                    RSS::Rss
    <channel>              RSS::Rss::Channel
      <title>...</title>   String
      <item>               RSS::Rss::Channel::Item
        <title>...</title> String
      <item>
      <item>               RSS::Rss::Channel::Item
        <title>...</title> String
      <item>
    </channel>
  </rss>

= Map to methods

  <rss>                    rss
    <channel>              rss.channel
      <title>...</title>   rss.channel.title
      <item>               rss.channel.items[0]
        <title>...</title> rss.channel.items[0].title
      <item>
      <item>               rss.channel.items[1]
        <title>...</title> rss.channel.items[1].title
      <item>
    </channel>
  </rss>

= Pros

Users can guess API from their data

= Example

  <rss>                    # Want /rss/channel/item/title!
    <channel>              rss.channel.items.each do |item|
      <title>...</title>
      <item>
  HERE: <title>...</title>   p item.title
      <item>
      <item>
  HERE: <title>...</title>
      <item>
    </channel>             end
  </rss>

= Cons

Verbose\n
for expert

= Cons - Interface

  RSS Parser | Not experts
           Good

  RSS Parser | Experts
          Verbose

= Example

  <rss>                    # Want item/title!
    <channel>              # Don't want to care
      <title>...</title>   # about channel.
      <item>               rss.items.each do |item|
  HERE: <title>...</title>   p item.title
      <item>
      <item>
  HERE: <title>...</title>
      <item>               end
    </channel>
  </rss>

= Cons

Not generic

= Web feed types

  * RSS 0.9*/2.0
    * Really Simple Syndication
  * RSS 1.0
    * RDF Site Summary
  * Atom
    * RFC 4287

= Differences

They are ((*NOT*)) compatible

= Differences - Interface

  RSS Parser | RSS 0.9*/2.0
  RSS Parser | RSS 1.0
  RSS Parser | Atom
             ^
    Different structures

= What users want

Process\n
all feed types\n
in the same way

= + High level API

  # coderay ruby
  # RSS 0.9*/20
  rss.items # /rss/channel/item
  # RSS 1.0
  rdf.items # /RDF/item
  # Atom
  feed.items # /feed/entry

= + High level API

  Users | RSS Parser | RSS 0.9*/2.0
  Users | RSS Parser | RSS 1.0
  Users | RSS Parser | Atom
        ^            ^
   Common API  Different structures

= RSS Parser - Design

  * Premise:(('note:前提：'))
    * Users can confirm their data\n
      (('note:ユーザーは自分たちのデータを確認できる'))
  * Easy to use:(('note:使いやすくするために：'))
    * Map data structure to Ruby\n
      (('note:データの構造をそのままRubyの世界に対応させる'))
    * + common feed type aware API\n
      (('note:さらにフィードの種類に依存しない共通APIも用意'))

= Knowledge - RSS Parser

  * Premise is important for API\n
    (('note:API設計に前提は大事'))
  * Different API layer for\n
    different type users\n
    (('note:違う種類のユーザーには違うAPIのレイヤーを'))

= RSS Parser - Snip

Validation\n
is\n
important

= Rabbit

Makes Ruby\n
((*presentation*))\n
ready

= Rabbit - History

  * 2004-07: The first release
  * 2010: Matz starts using Rabbit
    * Since RubyKaigi 2010?

= TODO

i18n

Jekyll

rake only

https://twitter.com/darashi/status/909994900694769664

gdb b rb_raise
