= My way with Ruby

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2018
: date
   2018-06-01
: start-time
   2018-06-01T09:40:00+09:00
: end-time
   2018-06-01T10:40:00+09:00
: theme
   .

= Ad: Silver sponsor

  # img
  # src = images/clear-code-rubykaigi-2018-silver-sponsor.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= My activities\nas a Rubyist

  * Increase what Ruby can
  * Maintain libraries

= The number of developing libraries

About 130

= How to find targets?\n(('note:„Åù„Çì„Å™„Å´„Éç„Çø„Åå„ÅÇ„Çã„ÅÆÔºü'))

Just I needed\n
(('note:Âçò„Å´Ëá™ÂàÜ„ÅåÂøÖË¶Å„Å†„Å£„Åü„Åã„Çâ'))

= RSS Parser

RSS/Atom parser\n
with\n
((*validation*))

= RSS Parser - History

  * 2003-05: The first release
    * No other RSS parser that supports validation even now
  * 2004-01: Ruby bundles this
    * Became a Ruby committer

= Validate RSS/Atom

  * Important for me
  * Most wild RSS/Atom feeds are\n
    ((*invalid*))
    * Validation helps to find problems

= RSS::Parser.parse

  # coderay ruby
  # Validate by default
  RSS::Parser.parse(rss)
  # Validation can be disabled
  RSS::Parser.parse(rss, false)

= Since Ruby 2.6

  # coderay ruby
  # Support option Hash
  parse(rss, validate: false)

= REXML

XML parser\n
written in\n
((*pure Ruby*))

= REXML - History

  * 2001?: Start by Sean Russell\n
    (('note:Êõ∏ÈÅã„Åï„Çì„ÅåÈñãÁô∫„ÇíÈñãÂßã'))
    * Based on Electric XML (Java)
    * REXML is "Ruby Electric XML"
  * 2003-01: Ruby bundles this

= REXML - Side story

  * Sean Russel has Kanji notation "Êõ∏ÈÅã"
  * Most non Japanese who I contacted were interested in Japan
    * How to write your name in Kanji?
  * We can connect with Ruby!

= Ad: Code Party

  # img
  # src = images/code-party.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= Ad: Code Party

(('tag:center'))
This is a challenge

  * Ruby focus to have fun
  * We have fun writing Ruby
  * We have fun together with writing Ruby at after party!?

= REXML - Recent1

  * 2010-08: RubyKaigi 2010
    * I became the maintainer
    * Because RSS Parser uses it

= REXML - Recent2

  * 2016: (({element[attribute_name]}))
    * Ruby 2.5 ships it

= REXML - Recent3

  * 2018: Fix XPath related bugs
    * Ruby 2.6 ships it

= REXML - Future?

  * ((*Pure Ruby*)) is valuable
    * Easy to install
    * JIT may improve performance\n
      (('note:NOTE: We should improve general logic before we expect JIT to improve performanceüòâ'))

= Recent my works

  * XML/HTML libraries for LuaJIT
    * XMLua: (('tag:x-small:((<URL:https://clear-code.github.io/xmlua/>))'))\n
      libxml2 based XML/HTML parser
    * LuaCS: (('tag:x-small:((<URL:https://clear-code.github.io/luacs/>))'))\n
      CSS Selectors‚ÜíXPath converter
  * Found what lacks in REXML API

= REXML - Future1

Introduce NodeSet

= REXML - NodeSet

  # coderay ruby
  doc.
    search("//item"). # => NodeSet
    text # All texts in <item>

= REXML - Future2

Support\n
CSS Selectors

= REXML - CSS Selectors

  # coderay ruby
  doc.css_select("ul li, dl dt")

= REXML - Future3

Support\n
HTML5 support

= REXML - HTML5

  # coderay ruby

  doc = REXML::HTML5Document.new(html5)
  doc.search("//li")
  doc.css_select("ul li")

= REXML - Future

  * Low priority in my activities
  * Do you want to work with me?

= Rabbit

(('tag:center'))
(('tag:large'))
Presentation tool\n
for ((*Rubyist*))

((' '))

= Rabbit - History

  * 2004-07: The first release
    * No other presentation tool for Rubyist even now
  * 2010: Matz migrated to Rabbit
    * Since RubyKaigi 2010?

= For Rubyist?

RD support

= RD

  * A text based markup language
    * Version controllable
  * Designed by Matz\n
    (('note:(Right?)'))

= For Rubyist?

Publish\n
our slides\n
as usual

= Publish as usual

  # coderay console
  % gem push your-slide-1.0.gem

= Published!

  # img
  # src = images/rabbit-slide-show.png
  # relative_height = 78

(('tag:center'))
(('tag:small'))
((<URL:https://slide.rabbit-shocker.org/>))

= What's needed for presentation tool?

GUI

= Ruby/GTK3

Multi-platform GUI toolkit

= Ruby/GTK3 - History

  * 1998-01: 1st release by Matz\n
    ((<[ruby-list:5877]|URL:http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/5877>))
  * 2004-05: I joined development
  * 2018-05: The latest release

= Ruby/GTK3 - Example

  # coderay ruby
  require "gtk3"
  app = Gtk::Application.new
  app.signal_connect(:activate) do
    window = Gtk::ApplicationWindow.new(app)
    window.show_all
  end
  app.run

= Approaches on\nmissing libraries(1)

  (1) Implement only the needed features
  (2) then back to Rabbit

= Approaches on\nmissing libraries(2)

  (1) Implement not only the needed features
  (2) but also (('note:almost')) all features
  (3) then back to Rabbit

= My approach

Implement all features\n
(('note:testing with Rabbit'))

= My priority

  * Rabbit is important
  * Increasing what Ruby can is also important

= GTK+ 3 - Size

3000 over API

= How to implement

Handwriting\n
‚Üì\n
Auto generation

= Ruby/GI

(('tag:center'))
(('tag:large'))
Generate bindings\n
automatically\n
at run-time

(('note:GI: GObject Introspection'))

= Ruby/GI - History

  * 2012: The first commit by me
  * 2014: Ruby/GTK3 used Ruby/GI

= Handwriting

  # img
  # src = images/ruby-gtk3-without-ruby-gi.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Auto generation

  # img
  # src = images/ruby-gtk3-with-ruby-gi.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Ruby/GI - See also

  * "How to create bindings 2016" at RubyKaigi 2016
    * (('tag:xx-small'))
      ((<URL:http://rubykaigi.org/2016/presentations/ktou.html>))
  * "GI Introduction" (('note:(in Japanese)'))
    * (('tag:xx-small'))
      ((<URL:https://github.com/RubyData/workshop-materials/blob/master/gobject-introspection/introduction.md>))

= Ruby/GI based bindings

Ruby/Pango

= Ruby/Pango

Text layout engine with\n
i18n support

(('note:i18n: Internationalization'))

= Ruby/Pango - Example

  # coderay ruby

  window.signal_connect(:draw) do |_, context|
    layout = context.create_pango_layout
    layout.text = "Hello„Åì„Çì„Å´„Å°„ÅØüç£"
    context.show_pango_layout(layout)
    GLib::Source::CONTINUE
  end

= Ruby/Pango - Example

Hello

ŸÖÿ±ÿ≠ÿ®ÿß

„Åì„Çì„Å´„Å°„ÅØ

= Ruby/GI based bindings

Ruby/GdkPixbuf2

= Ruby/GdkPixbuf2

Image manipulation

= Ruby/GdkPixbuf2 - Example

  # coderay ruby

  require "gdk_pixbuf2"
  # Load an image: Format is auto detected
  pixbuf = GdkPixbuf::Pixbuf.new(file: "x.png")
  # Scale to half size
  half = pixbuf.scale(pixbuf.width / 2,
                      pixbuf.height / 2,
                      :bilinear)
  # Save as different format
  half.save("half.jpg")

= Ruby/GdkPixbuf2 - Example

  # img
  # src = images/the-tortoise-and-the-hare.gif
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Ruby/GI based bindings

Ruby/Poppler

= Ruby/Poppler

PDF renderer

= Ruby/Poppler - Example

TODO

= Ruby/GI based bindings

Ruby/GStreamer

= Ruby/GStreamer

Audio/Video player

(*) Streaming media framework

= Ruby/GStreamer - Example

TODO

#  # video
#  # src = test.mp4

= What's needed for presentation tool?

PDF output

= rcairo

2D graphics renderer

= rcairo - Outputs

  * PNG
  * ((*PDF*))
  * SVG
  * ((*Display*)) (X/macOS/Windows)
  * ...

= rcairo - History

  * 2003-10: The initial commit
  * 2005-09: I started developing
    * Sent several patches and\n
      got commit bit and more
  * 2005-10: 1.0.0

= rcairo - Example

  # coderay ruby

  window.signal_connect(:draw) do |_, context|
    # context is an object in rcairo!
    layout = context.create_pango_layout
    layout.text = "Hello„Åì„Çì„Å´„Å°„ÅØüç£"
    context.show_pango_layout(layout)
    GLib::Source::CONTINUE
  end

= test-unit

Testing framework\n
to write tests\n
((*in Ruby*))

= test-unit - History

  * 2003-02: Import to Ruby
  * 2008-05: I became a maintainer
  * 2008-10: Removed from Ruby

(('note:See also: "The history of testing framework in Ruby"'))\n
(('tag:x-small'))((<URL:http://rubykaigi.org/2015/presentations/kou>))

= test-unit - New feature

Grouping

= Grouping

(('tag:center'))
The most important feature

  * For maintainable tests
  * TODO

= Grouping - Example

  # coderay ruby

  class StackTest < Test::Unit::TestCase
    class PushTest < self
      def test_XXX; end
    end
    class PopTest < self
      def test_XXX; end
    end
  end

= Grouping - Method style

  # coderay ruby

  class StackTest < Test::Unit::TestCase
    sub_test_case("#push") do
      def test_XXX; end
    end
    sub_test_case("#pop") do
      def test_XXX; end
    end
  end

= test-unit - New feature

Data driven test

= Data driven test

  # coderay ruby

  data("positive", [3,  1, 2])
  data("negative", [-4, 1, -5])
  def test_add(data)
    expected, augend, addend = data
    assert_equal(expected,
                 add(augend, addend))
  end

= test-unit - New feature

Reverse backtrace

= Reverse backtrace

  * Reverse backtrace only when terminal output
  * The same change as Ruby 2.5.0

= test-unit - New feature

Test double

= test-unit-rr

RR integration

= RR - History

  * 2007-06: The initial commit
  * 2014-12: Orphan
  * 2015-05: I became a maintainer

= RR - Example

  # coderay ruby

  adder = Object.new
  adder.add(1, 2) # => Error
  stub(adder).add(1, 2) {3}
  adder.add(1, 2) # => 3

= Full text search

= Data processing

