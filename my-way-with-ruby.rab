= My way with Ruby

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2018
: date
   2018-06-01
: start-time
   2018-06-01T09:40:00+09:00
: end-time
   2018-06-01T10:40:00+09:00
: theme
   .

= Ad: Silver sponsor

  # img
  # src = images/clear-code-rubykaigi-2018-silver-sponsor.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= Keynote-ish topic

Did you think about it?

= Keynote-ish topic1

Future

= Keynote-ish topic2

Focus on\n
one thing\n
((*deeply*))

= Keynote-ish topic3

Overview

= My activities\nas a Rubyist

  * Increase what Ruby can
  * Maintain libraries

= The number of developing libraries

About 130

= How to find targets?\n(('note:„Åù„Çì„Å™„Å´„Éç„Çø„Åå„ÅÇ„Çã„ÅÆÔºü'))

Just I needed\n
(('note:Âçò„Å´Ëá™ÂàÜ„ÅåÂøÖË¶Å„Å†„Å£„Åü„Åã„Çâ'))

= Topic of this talk

Overview\n
what we can do\n
((*with Ruby*))

= Category1

Web feed

= RSS Parser

RSS/Atom parser\n
with\n
((*validation*))

= RSS Parser - History

  * 2003-05: The first release
    * No other RSS parser that supports validation even now
  * 2004-01: Ruby bundles this
    * Became a Ruby committer

= Validate RSS/Atom

  * Important for me
  * Most wild RSS/Atom feeds are\n
    ((*invalid*))
    * Validation helps to find problems

= RSS::Parser.parse

  # coderay ruby
  # Validates by default
  RSS::Parser.parse(rss)
  # Validation can be disabled
  RSS::Parser.parse(rss, false)

= Since Ruby 2.6

  # coderay ruby
  # Supports keyword argument
  parse(rss, validate: false)

= REXML

XML parser\n
written in\n
((*pure Ruby*))

= REXML - History

  * 2001: Started by Sean Russell\n
    (('note:Êõ∏ÈÅã„Åï„Çì„ÅåÈñãÁô∫„ÇíÈñãÂßã'))
    * Based on Electric XML (Java)
    * REXML is "Ruby Electric XML"
  * 2003-01: Ruby bundles this

= REXML - Side story

  * Sean Russel has Kanji notation "Êõ∏ÈÅã"
  * Most non Japanese who I contacted were interested in Japan
    * How to write your name in Kanji?
  * We can connect with Ruby!

= Ad: Code Party

  # img
  # src = images/code-party.png
  # relative_height = 100
  # reflect_ratio = 0.1

== Slide properties

: enable-title-on-image
   false

= Ad: Code Party

(('tag:center'))
This is a challenge

  * Ruby focus to have fun
  * We have fun writing Ruby
  * We have fun together with writing Ruby at after party!?

= Ad: Code Party

  * Matz attends Code Party
  * Sponsored by Speee, Inc.

= REXML - Recent1

  * 2010-08: RubyKaigi 2010
    * I became the maintainer
    * Because RSS Parser uses it

= REXML - Recent2

  * 2016: (({element[attribute_name]}))
    * Ruby 2.5 ships it

= REXML - Recent3

  * 2018: Fix XPath related bugs
    * Ruby 2.6 ships it

= REXML - Future?

  * ((*Pure Ruby*)) is valuable
    * Easy to install
    * JIT may improve performance\n
      (('note:NOTE: We should improve general logic before we expect JIT to improve performanceüòâ'))

= Recent my works

  * XML/HTML libraries for LuaJIT
    * XMLua: (('tag:x-small:((<URL:https://clear-code.github.io/xmlua/>))'))\n
      libxml2 based XML/HTML parser
    * LuaCS: (('tag:x-small:((<URL:https://clear-code.github.io/luacs/>))'))\n
      CSS Selectors‚ÜíXPath converter
  * Found what lacks in REXML API

= REXML - Future1

Introduce NodeSet

= REXML - NodeSet

  # coderay ruby
  doc.
    search("//item"). # => NodeSet
    text # All texts in <item>

= REXML - Future2

Support\n
CSS Selectors

= REXML - CSS Selectors

  # coderay ruby
  doc.css_select("ul li, dl dt")

= REXML - Future3

Support\n
HTML5 support

= REXML - HTML5

  # coderay ruby

  doc = REXML::HTML5Document.new(html5)
  doc.search("//li")
  doc.css_select("ul li")

= REXML - Future

  * Low priority in my activities
  * Do you want to work with me?

= Category2

Presentation

= Rabbit

(('tag:center'))
(('tag:large'))
Presentation tool\n
for ((*Rubyist*))

((' '))

= Rabbit - History

  * 2004-07: The first release
    * No other presentation tool for Rubyist even now
  * 2010: Matz migrated to Rabbit
    * Since RubyKaigi 2010?

= For Rubyist?

RD support

= RD

  * A text based markup language
    * Version controllable
  * Designed by Matz\n
    (('note:(Right?)'))

= For Rubyist?

Publish\n
our slides\n
as usual

= Publish as usual

  # coderay console
  % gem push your-slide-1.0.gem

= Published!

  # img
  # src = images/rabbit-slide-show.png
  # relative_height = 78

(('tag:center'))
(('tag:small'))
((<URL:https://slide.rabbit-shocker.org/>))

= What's needed for presentation tool?

GUI

= Ruby/GTK3

Multi-platform GUI toolkit

= Ruby/GTK3 - History

  * 1998-01: 1st release by Matz\n
    ((<[ruby-list:5877]|URL:http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/5877>))
  * 2004-05: I joined development
  * 2018-05: The latest release

= Ruby/GTK3 - Example

  # coderay ruby
  require "gtk3"
  app = Gtk::Application.new
  app.signal_connect(:activate) do
    window = Gtk::ApplicationWindow.new(app)
    window.show_all
  end
  app.run

= Approaches on\nmissing libraries(1)

  (1) Implement only the needed features
  (2) then back to Rabbit

= Approaches on\nmissing libraries(2)

  (1) Implement not only the needed features
  (2) but also (('note:almost')) all features
  (3) then back to Rabbit

= My approach

Implement all features\n
(('note:testing with Rabbit'))

= My priority

  * Rabbit is important
  * Increasing what Ruby can is also important

= GTK+ 3 - Size

3000 over API

= How to implement

Handwriting\n
‚Üì\n
Auto generation

= Ruby/GI

(('tag:center'))
(('tag:large'))
Generate bindings\n
automatically\n
at run-time

(('note:GI: GObject Introspection'))

= Ruby/GI - History

  * 2012: The first commit by me
  * 2014: Ruby/GTK3 used Ruby/GI

= Handwriting

  # img
  # src = images/ruby-gtk3-without-ruby-gi.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Auto generation

  # img
  # src = images/ruby-gtk3-with-ruby-gi.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Ruby/GI - See also

  * "How to create bindings 2016" at RubyKaigi 2016
    * (('tag:xx-small'))
      ((<URL:http://rubykaigi.org/2016/presentations/ktou.html>))
  * "GI Introduction" (('note:(in Japanese)'))
    * (('tag:xx-small'))
      ((<URL:https://github.com/RubyData/workshop-materials/blob/master/gobject-introspection/introduction.md>))
    * Build system: Meson + ninja

= Ruby/GI based bindings

Ruby/Pango

= Ruby/Pango

Text layout engine with\n
i18n support

(('note:i18n: Internationalization'))

= Ruby/Pango - Example

  # coderay ruby

  window.signal_connect(:draw) do |_, context|
    layout = context.create_pango_layout
    layout.text = "Hello„Åì„Çì„Å´„Å°„ÅØüç£"
    context.show_pango_layout(layout)
    GLib::Source::CONTINUE
  end

= Ruby/Pango - Example

Hello

ŸÖÿ±ÿ≠ÿ®ÿß

„Åì„Çì„Å´„Å°„ÅØ

= Ruby/GI based bindings

Ruby/GdkPixbuf2

= Ruby/GdkPixbuf2

Image manipulation

= Ruby/GdkPixbuf2 - Example

  # coderay ruby

  require "gdk_pixbuf2"
  # Load an image: Format is auto detected
  pixbuf = GdkPixbuf::Pixbuf.new(file: "x.png")
  # Scale to half size
  half = pixbuf.scale(pixbuf.width / 2,
                      pixbuf.height / 2,
                      :bilinear)
  # Save as different format
  half.save("half.jpg")

= Ruby/GdkPixbuf2 - Example

  # img
  # src = images/the-tortoise-and-the-hare.gif
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Ruby/GI based bindings

Ruby/Poppler

= Ruby/Poppler

PDF\n
parser/renderer

= Ruby/Poppler - Example

  # coderay ruby

  require "poppler"
  doc = Poppler::Document.new("x.pdf")
  doc.each do |page|
    puts page.text # Extract all texts
  end

= Ruby/Poppler - Example

  # image
  # src = images/rubykaigi-2017-extension-by-cpp-title.pdf
  # relative_height = 80
  # reflect_ratio = 0.1

(('tag:center'))
(('tag:x-small'))
((<URL:http://rubykaigi.org/2017/presentations/ktou.html>))

== Slide properties

: enable-title-on-image
   false

= Ruby/GI based bindings

Ruby/GStreamer

= Ruby/GStreamer

Audio/Video player

(*) Streaming media framework

= Ruby/GStreamer - Example

  # coderay ruby

  require "gst"
  description = [
    "autovideosrc",  # Camera
    "videoconvert",  # Filter
    "autovideosink", # Window
  ].join(" ! ")
  pipeline = Gst.parse_launch(description)
  pipeline.play
  until pipeline.bus.poll.type.eos? do
  end # Main loop
  pipeline.stop

= Ruby/GStreamer - Example

TODO

#  # video
#  # src = test.mp4

= What's needed for presentation tool?

PDF output

= rcairo

2D graphics renderer

= rcairo - Outputs

  * PNG
  * ((*PDF*))
  * SVG
  * ((*Display*)) (X/macOS/Windows)
  * ...

= rcairo - History

  * 2003-10: The initial commit
  * 2005-09: I started developing
    * Sent several patches and\n
      got commit bit and more
  * 2005-10: 1.0.0

= Example - Red A4 PDF

  # coderay ruby

  require "cairo"
  include Cairo
  PDFSurface.create("x.pdf", "A4") do |surface|
    Context.create(surface) do |context|
      context.set_source_color(:red)
      context.paint
    end
  end

= rcairo - GC

    # image
    # src = images/cairo-no-gc-trigger.pdf
    # align = right
    # vertical_align = bottom
    # relative_width = 65
    # relative_padding_right = -7
    # relative_padding_bottom = -10

  # coderay ruby
  1000.times do
    Cairo::ImageSurface.new(:argb32, 6000, 6000)
  end

(('tag:margin-bottom * 20'))

= GC - Cause

    # image
    # src = images/cairo-no-gc-trigger.pdf
    # align = right
    # vertical_align = bottom
    # relative_width = 67
    # relative_padding_right = -11
    # relative_padding_bottom = -10

  * GC isn't ran enough frequency
    * Because Ruby doesn't know how many memory used by cairo

(('tag:margin-bottom * 18'))

= GC - Fix

    # image
    # src = images/cairo-gc-trigger.pdf
    # align = right
    # vertical_align = bottom
    # relative_width = 67
    # relative_padding_right = -11
    # relative_padding_bottom = -10

  * (({rb_gc_adjust_memory_usage()}))
    * Improve GC frequency
  * Ruby 2.4 ships it

(('tag:margin-bottom * 18'))

= Category3

Test

= test-unit

Testing framework\n
to write tests\n
((*in Ruby*))

= test-unit - History

  * 2003-02: Import to Ruby
  * 2008-05: I became a maintainer
  * 2008-10: Removed from Ruby

(('note:See also: "The history of testing framework in Ruby"'))\n
(('tag:x-small'))((<URL:http://rubykaigi.org/2015/presentations/kou>))

= test-unit - New feature

Grouping

= Grouping

  * The most important feature
  * Keep tests maintainable

= Grouping - Example

  # coderay ruby

  class StackTest < Test::Unit::TestCase
    class PushTest < self
      def test_XXX; end
    end
    class PopTest < self
      def test_XXX; end
    end
  end

= Grouping - Method style

  # coderay ruby

  class StackTest < Test::Unit::TestCase
    sub_test_case("#push") do
      def test_XXX; end
    end
    sub_test_case("#pop") do
      def test_XXX; end
    end
  end

= test-unit - New feature

Data driven test

= Data driven test

  # coderay ruby

  data("positive", [3,  1, 2])
  data("negative", [-4, 1, -5])
  def test_add(data)
    expected, augend, addend = data
    assert_equal(expected,
                 add(augend, addend))
  end

= test-unit - New feature

Reverse backtrace

= Reverse backtrace

  * Reverse backtrace only when terminal output
  * The same change as Ruby 2.5.0

= test-unit - New feature

Test double

= test-unit-rr

RR integration

= RR - History

  * 2007-06: The initial commit
  * 2014-12: Orphan
  * 2015-05: I became a maintainer

= RR - Example

  # coderay ruby

  adder = Object.new
  adder.add(1, 2) # => Error
  stub(adder).add(1, 2) {3}
  adder.add(1, 2) # => 3

= Category4

Full text search

= Rroonga

Full text search\n
((*library*))

= Rroonga - History

  * 2009-05: The first commit
    * I'm the author

= ((*Library*)) vs Client

  * No server process
  * Easy to start
  * Write in Ruby

= Example - Create DB

  # coderay ruby
  require "groonga"

  Groonga::Database.create(path: "/tmp/db")

= Example - Define schema

  # coderay ruby

  Groonga::Schema.define do |schema|
    schema.create_table("docs") do |table|
      # The column to store text
      table.text("content")
    end
    # The index for full text search
    schema.create_lexicon("terms") do |table|
      table.index("docs.content")
    end
  end

= Example - Add records

  # coderay ruby

  docs = Groonga["docs"]
  docs.add(content: "String#<< concatenates ...")
  docs.add(content: "String#dup duplicates ...")

= Example - Search

  # coderay ruby

  matches = docs.select do |record|
    record.content.match("concat")
  end
  p matches.size # => 1
  matches.each do |record|
    p record.content # => "String#<< concat..."
  end

= Use case - Rabbit Slide Show

  # img
  # src = images/rabbit-slide-show.png
  # relative_height = 78

(('tag:center'))
(('tag:small'))
((<URL:https://slide.rabbit-shocker.org/>))

= Use case - Rurema Search

TODO: Screenshot

https://docs.ruby-lang.org/ja/search/

= Rurema Search

  * Super fast!
  * Tune for programming document
    * Symbols (#, @, ...) are important

= Use case - RDoc Search

  * Planning
  * Do you want to work with me?

= Rurema and RDoc

  # RT

  Project, Language, Target

  Rurema, Japanese, Japanese Rubyists
  RDoc, English, All Rubyists

= Source

  * Shared nothing
    * Copy based share
    * e.g.:\n
      Description,\n
      Sample codes,\n
      ...

= To be from my point of view

  * Can we share documents?
  * How to work together deeply?

= Internationalization: i18n

  * Source: RDoc
    * For all Rubyists
  * Translate to Japanese
    * For Japanese Rubyists

= Add i18n support

  * YARD
    * Since 0.8.0 at 2012-04
  * RDoc
    * Since 4.2.0 at 2014-12

= YARD - i18n

  # coderay console

  # Generates po/yard.pot
  % yard i18n

= YARD - i18n

  # coderay console

  # Create po/ja.po from po/yard.pot
  % msginit \
      --locale=ja_JP.UTF-8 \
      --input=po/yard.pot \
      --output-file=po/ja.po

= YARD - i18n

  # coderay console

  # Translate messages in po/ja.po
  % editor po/ja.po

= YARD - i18n

  # coderay console

  # Generate documents with
  # translated messages
  % yard --locale ja

= Packnga

Rake task for YARD i18n

= Packnga - Example

  # coderay ruby

  # Rakefile
  require "packnga"
  Packnga::DocumentTask.new(spec) do |task|
    task.original_language = "en"
    task.translate_languages = ["ja"]
  end

= Packnga - Example

  # coderay console

  % rake reference:translate
  % editor doc/po/ja/x.edit.po
  % rake reference:translate
  % editor doc/po/ja/x.edit.po
  ...

= Packnga - See also

  * test-unit
    * A real world user

= RDoc - i18n

  # coderay console

  # Generates doc/rdoc.pot
  % rdoc --format=pot

= RDoc - i18n

  # coderay console

  # Create locale/ja.po
  # from doc/rdoc.pot
  % mkdir -p locale
  % msginit \
      --locale=ja_JP.UTF-8 \
      --input=doc/rdoc.pot \
      --output-file=locale/ja.po

= RDoc - i18n

  # coderay console

  # Translate messages in po/ja.po
  % editor locale/ja.po

= RDoc - i18n

  # coderay console

  # Generate documents with
  # translated messages
  % rdoc --locale ja

= RDoc, Rurema and i18n

  * No progress...
  * Do you want to work with me?

= jekyll-task-i18n

Jekyll + i18n

= Features

  * Support all markups!
  * GitHub pages ready!

= Usage

  # coderay ruby

  # Rakefile
  require "jekyll/task/i18n"
  Jekyll::Task::I18n.define do |task|
    task.locales = ["ja"]
    task.files = Rake::FileList["**/*.md"]
    task.files -= Rake::FileList["_*/**/*.md"]
    task.files -= Rake::FileList["README.md"]
    task.locales.each do |locale|
      task.files -= Rake::FileList["#{locale}/**/*.md"]
    end
  end
  task :default => ["jekyll:i18n:translate"]

= Usage

  % editor index.md
  % rake
  % editor _po/ja/index.edit.po
  % rake
  % git commit -a

= Use case: Red Data Tools

TODO: screenshot

https://red-data-tools.github.io/

= groonga-client

Full text search\n
((*client*))

= groonga-client - History

  * 2013-01: The first commit
    * I'm one of authors

= Library vs ((*Client*))

  * Less dependencies
  * Less resource

= groonga-client - Example

  # coderay ruby

  require "groonga/client"
  url = "http://localhost:10041"
  Groonga::Client.open(url: url) do |client|
    response =
      client.select(table: "docs",
                    match_columns: "content",
                    query: "concat")
    p response.n_hits # => 1
  end

= Asynchronous

  # coderay ruby

  client.select(table: "docs",
                match_columns: "content",
                query: "concat") do |response|
    p response.n_hits # => 1
  end
  p :here # => :here then ‚Üë
  sleep(0.1)

= Asynchronous - wait

  # coderay ruby

  request =
    client.select(table: "docs",
                  match_columns: "content",
                  query: "concat") do |response|
    p response.n_hits # => 1
  end
  p :here # => :here then ‚Üë
  request.wait

= groonga-client-rails

Ruby on Rails\n
integration\n
for\n
groonga-client

= Architecture

  * Data: RDBMS
  * Full text search: Groonga

= Define app searcher

  # coderay ruby

  # app/searchers/application_searcher.rb
  class ApplicationSearcher <
          Groonga::Client::Searcher
  end

= Define searcher

  # coderay ruby

  # app/searchers/document_searcher.rb
  class DocumentsSearcher < ApplicationSearcher
    # Define a full text search index as "content"
    schema.column :content, {
      type: "Text",
      index: true,
      index_type: :full_text_search,
    }
  end

= Bind to model

  # coderay ruby

  # app/models/document.rb
  class Document < ApplicationRecord
    # DocumentsSearcher searches Document model
    source = DocumentsSearcher.source(self)
    # Bind Document's "content" column to
    # DocumentsSearcher's "content" index
    source.content = :content
  end

= Search

  # coderay ruby

  # app/controllers/documents_controller.rb
  class DocumentsController < ApplicationController
    def index
      @query = params[:query]
      searcher = DocumentSearcher.new
      @result_set = searcher.search.
         query(@query).
         result_set
    end
  end

= See also

  * Tutorial in Japanese
    * (('tag:xx-small'))
      ((<URL:http://www.clear-code.com/blog/2016/12/22.html>))

= Groonga

mruby embedded\n
full text search engine

= How to use?

  * Optimizer
  * Custom command

= Example: Custom command

  # coderay ruby

  module Sharding
    class LogicalSelectCommand < Groonga::Command
      # ...
    end
  end

= See also

  * Redmine plugin
    * (('tag:x-small'))
      Repository: ((<URL:https://github.com/clear-code/redmine_full_text_search>))
    * (('tag:x-small'))
      Slide (in Japanese): ((<URL:https://slide.rabbit-shocker.org/authors/kou/redmine-tokyo-12/>))

= Ranguba (WIP)

Full text search system

= Use cases

  * File server search
  * Mail search
  * Web site search

= Features

  * Crawlers
  * Web UI
  * CLI
    * Update documents
    * Search documents

= ChupaText

Text extractor

= Supported formats

  * PDF
  * Office documents
    * Word, Excel, OpenDocument, ...
  * Mail
  * ...

= Interface

  * HTTP
  * Web UI
  * CLI

= Install

  * Vagrant
  * Docker
  * gem install

= Use cases

  * Ranguba
    * Full text search system
  * Commit E-mail

= git-commit-mailer

Commit E-mail for Git

= Features

  * HTML mail
    * Highlighted diff
  * GitLab/GitHub Web hook support
    * (('tag:x-small'))
      By ((<URL:https://github.com/clear-code/github-web-hooks-receiver>))

= Users

  * tDiary
  * My projects

https://github.com/clear-code/git-commit-mailer

= commit-email.info

Commit E-mail\n
as a\n
Service

= How to use?

  * Send a pull request to\n
    ((<"GitHub:kou/commit-email.info"|URL:https://github.com/kou/commit-email.info>))
  * Register a Web hook
  * Subscribe your mailing list

(('note:See also ((<URL:http://www.commit-email.info/>))'))

= Category5

Data processing

= csv

CSV parser

= csv - History

  * 2003: Import
  * 2007: Replaced with FasterCSV
  * 2018: I became a co-maintainer with mrkn

= Why?

  * There are many CSV data
  * Important to process data

= CSV format problems

  * Slow to parse
  * Too wild

= Red Arrow

Apache Arrow Ruby

= Red Arrow - History

  * 2017-02: The first commit
  * 2018-05: Became the "official" Ruby bindings of Apache Arrow

= Apache Arrow

  * Super fast data format
    * For in-memory data
  * Cross-language support
    * Easy to share data with Python, Java, ...

= Apache Arrow - Position

  * A very important peace\n
    in recent data processing
    * Like JIT for Ruby 3

= Red Arrow - Impl

  * Based on Ruby/GI
    * Auto generated bindings

= Red Data Tools

A project to make Ruby data processable

= Red Data Tools - History

  * 2017-02: Start
  * 2017-11-: Develop events per month at Tokyo at Speee. Inc,
    * 2018-06-20: The next event

= The number of products

About 20

= Red Datasets

Dataset fetcher

= Red Datasets - History

  * 2017-12: The first commit

= Red Datasets - Example

  # coderay ruby

  require "datasets"

  wikipedia = Datasets::WikiPedia.new
  wikipedia.each do |page|
    p page.title
  end

= Use case: Wikipedia search

  # coderay ruby

  pages = Groonga["pages"]
  wikipedia = Datasets::WikiPedia.new
  wikipedia.each do |page|
    pages.add(title: page.title,
              content: page.revision.text)
  end
  ruby_pages = pages.select do |record|
    record.match("Ruby")
  end
  p ruby_pages.n_hits

= jekyll-jupyter-notebook

Jekyll\n
+\n
Jupyter Notebook

= Usage

  {% jupyter_notebook sample.ipynb %}

= Red OpenCV

Computer Vision

= Example - Camera

  # coderay ruby

  require "cv"
  camera = CV::Camera.new
  image = camera.read
  image.write("capture.jpg")

= Example - Face detect

  # coderay ruby

  image_gray = image.convert_color(:bgr2gray)
  classifier = # Face detector
    CV::CascadeClassifier.new("frontalface_alt")
  objects = classifier.detect(image_gray)
  color = CV::Color.new(0, 0, 255)
  objects.each do |object|
    # Draw detected area
    image.draw_rectangle(object, color)
  end
  image.write("detect.jpg")

= Red OpenCV - Impl

  * Based on Ruby/GI
    * Auto generated bindings

= Ad: Ruby Data Workshop

  * 2018-06-01 15:50/17:20
  * Contents:
    * Workshop by mrkn
    * Presentations what Red Data Tools did by Red Data Tools members

= Process data with Ruby

  * We're working on it
  * Do you want to work with us?

= How to join 1

  * Join our chat rooms:
    * English: ((<"Gitter:red-data-tools/en"|URL:https://gitter.im/red-data-tools/en>))
    * Japanese: ((<"Gitter:red-data-tools/ja"|URL:https://gitter.im/red-data-tools/ja>))
  * Join monthly events at Tokyo
    * ((<URL:https://speee.connpass.com/>))

= How to join 2

  * Hire a developer to work on
    * e.g.: mrkn by Speee, Inc.

= How to join 3

  * Order ClearCode to work on it
  * Join ClearCode to work on it

= Wrap up

  * I'm working on the followings as a Rubyist
    * Increase what Ruby can
    * Maintain libraries
  * Do you want to work with me?
